name: CICD SCW app
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev 


jobs:

  test:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.10"
  
        - name: Install dependencies
          run: |
            pip install -r requirements.txt

        - name: create env file
          run: |
            echo "SECRET_KEY=dummy_key" > .env
  
        - name: Run Django tests
          run: |
            python manage.py test api.tests
                

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run trivy scan if vulnerabilites are detected 
        uses: aquasecurity/trivy-action@master
        with:
           scan-type: 'fs'
           ignore-unfixed: true
           format: 'table'
           output: trivy-fs-report
        env:
           TRIVY_SKIP_DB_UPDATE: true
           TRIVY_SKIP_JAVA_DB_UPDATE: true    

      - name: Parse Trivy Report
        id: parse-fs
        run: |
          critical=$(grep -c '│.*│.*│ CRITICAL │' trivy-fs-report.txt || true)
          high=$(grep -c '│.*│.*│ HIGH     │' trivy-fs-report.txt || true)
          echo "critical_vulnerabilities=$critical" >> $GITHUB_OUTPUT
          echo "high_vulnerabilities=$high" >> $GITHUB_OUTPUT     
          echo "Extracted HIGH=$high"
          echo "Extracted CRITICAL=$critical"
        shell: bash       
        

      - name: Send Message to cliq for Scan phase fail
        if:  ${{ steps.parse-fs.outputs.critical_vulnerabilities > 3 || steps.parse-fs.outputs.high_vulnerabilities > 3}} 
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report
          path: trivy-fs-report.txt

      - name: exit on file scan failure
        if: ${{  steps.parse-fs.outputs.critical_vulnerabilities > 3 || steps.parse-fs.outputs.high_vulnerabilities > 3}}
        run: |
            echo "Scan failed. Exiting pipeline."
            exit 4       
 
  build-and-push:
      runs-on: ubuntu-latest
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
     
        - name: Build & Upload image to ECR
          uses: appleboy/docker-ecr-action@master
          id: building-main
          with:
           access_key: ${{ secrets.AWS_ACCESS_KEY_ID_MAIN }}
           secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_MAIN }}
           registry: ${{ secrets.REGISTRY }}
           repo: scw-app
           region: ${{ secrets.AWS_REGION_MAIN}}
           tags: latest, v0.0.${{github.run_number}}
           daemon_off: false
           dockerfile: ./Dockerfile
           context: ./ 
            
  deploy:
    runs-on: ubuntu-latest 
    needs: build-and-push
    permissions:
      deployments: write
      contents: write
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      AWS_REGION: ${{ secrets.AWS_REGION_MAIN  }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_MAIN  }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_MAIN  }}  
      IMAGE_URI: ${{ secrets.REGISTRY }}/scw-app:latest

    steps:
      - uses: actions/checkout@v4
      
      - name: start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN}}
          env: production
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_MAIN  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_MAIN }}
          aws-region: ${{ secrets.AWS_REGION_MAIN }}
        
      - name: SSH into EC2 and deploy 
        uses: appleboy/ssh-action@v1.2.0
        id: deploying
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.PORT }}
          
          script: |
            # Configure AWS CLI on the EC2 instance
            aws ecr get-login-password --region ${{ secrets.AWS_REGION_MAIN }} | docker login --username AWS --password-stdin ${{ secrets.REGISTRY_STAGING}}
            echo "Pulling Docker image: ${{ env.IMAGE_URI}}"
            docker pull ${{ env.IMAGE_URI}}
            echo "Running new container..."
            docker compose -f scw-compose.yaml up -d
            docker system prune --all --force || true

          
      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN}}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://scw.vitalenex.com
        
   
    